<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_animate = false;

target_obj = noone;

initial_value = 0;
initial_value[0] = 0;
initial_value[1] = 0;

final_value = 0;
final_value[0] = 0;
final_value[1] = 0;

current_value = 0;
current_value[0] = 0;
current_value[1] = 0;
previous_value = 0;
previous_value[0] = 0;
previous_value[1] = 0;

value_difference = 0;
value_difference[0] = 0;
value_difference[1] = 0;

no_of_values = 1;
curr_value_no = 0;

easing = anima_ease_linear;
duration = 0;
timer = 0;

/*
no_of_start_events = 0;
start_events = 0;
start_events[0, 0] = noone; // Object
start_events[0, 1] = noone; // Event type
start_events[0, 2] = noone; // Event number

no_of_end_events = 0;
end_events = 0;
end_events[0, 0] = noone; // Object
end_events[0, 1] = noone; // Event type
end_events[0, 2] = noone; // Event number
*/

current_timed_event = 0;
first_timed_event_index = -1;
timed_event = 0;
timed_event[0, 0] = -1; // Time for this event to trigger
timed_event[0, 1] = -1; // Index of next event
timed_event[0, 2] = noone; // Object
timed_event[0, 3] = noone; // Event type
timed_event[0, 4] = noone; // Event number

loop = false;

destroy_after_use = false;

is_by = false;
paused = false;
looped_first_time = false;

i = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(target_obj)){
    instance_destroy();
}
else{
    if(can_animate &amp;&amp; !paused){
        if(timer &lt; duration){
            if((timer == 0) &amp;&amp; !looped_first_time){            
                event_user(3);
            }
        
            for(curr_value_no = 0; curr_value_no &lt; no_of_values; curr_value_no++){
                previous_value[curr_value_no] = current_value[curr_value_no];
                current_value[curr_value_no] = script_execute(easing, timer, initial_value[curr_value_no], value_difference[curr_value_no], duration);
            }       
            
            event_user(0);
            
            /* 
            if (timer == 0){
                for(i = 0; i &lt; no_of_start_events; i++){
                    if(instance_exists(start_events[i, 0])){
                        with(start_events[i, 0]){
                            event_perform(other.start_events[i, 1], other.start_events[i, 2]);
                        }
                    }
                }
            }
            */
            event_user(5);
            
            timer++;
        }
        else{
            for(curr_value_no = 0; curr_value_no &lt; no_of_values; curr_value_no++){
                previous_value[curr_value_no] = current_value[curr_value_no];
                current_value[curr_value_no] = final_value[curr_value_no];
            }
            
            event_user(0);
            
            /*
            for(i = 0; i &lt; no_of_end_events; i++){
                if(instance_exists(end_events[i, 0])){
                    with(end_events[i, 0]){
                        event_perform(other.end_events[i, 1], other.end_events[i, 2]);
                    }
                }
            }
            */
            event_user(5);
            
            if(loop){
                if(!looped_first_time){
                    looped_first_time = true;
                }
                timer = 0;   
            }
            else{
                can_animate = false;
            }
            current_timed_event = first_timed_event_index;
            if(destroy_after_use){
                instance_destroy();                  
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking if there's an event to be triggered
if ((current_timed_event != -1) &amp;&amp; (timed_event[current_timed_event, 0] &lt;= timer)){
    i = current_timed_event;
    while ((i != -1) &amp;&amp; (timed_event[i, 0] &lt;= timer)){
        if(instance_exists(timed_event[i, 2])){
            with(timed_event[i, 2]){
                event_perform(other.timed_event[other.i, 3], other.timed_event[other.i, 4]);
            }
        }
        i = timed_event[i, 1];
        current_timed_event = i;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set animation target to initial state
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get initial values
for(curr_value_no = 0; curr_value_no &lt; no_of_values; curr_value_no++){
    //show_debug_message("initial_value[curr_value_no] " + string(initial_value[curr_value_no]) + ", final_value[curr_value_no] " + string(final_value[curr_value_no]));
    current_value[curr_value_no] = initial_value[curr_value_no];
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop animation
anima_stop(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start animation
anima_start(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update current values
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
