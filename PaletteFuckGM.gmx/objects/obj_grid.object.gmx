<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_placeholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cell_size = 32;
line_width = 1;
line_color = make_colour_hex("202020");
selected_cell_color = c_white;
//line_color = c_white;
width = sprite_width/cell_size;
height = sprite_height/cell_size;
//show_debug_message("width: " + string(sprite_width) + ", height: " + string(sprite_height));
//show_debug_message("c width: " + string(width) + ", c height: " + string(height));
has_borders = false;
i = 0;
j = 0;

cells[width - 1, height - 1] = noone;

for(i = 0; i &lt; width; i++){
    for(j = 0; j &lt; height; j++){
        cells[i, j] = instance_create(x + i * cell_size, y + j * cell_size, obj_grid_cell);        
        cells[i, j].image_xscale = cell_size;
        cells[i, j].image_yscale = cell_size;
        cells[i, j].row = j;
        cells[i, j].col = i;
        cells[i, j].father = id;
    }
}
//previous_selected_cell = noone;
selected_cell = noone;
shadow = 360;
light = 0;
color_to_paint = c_black;
file_name = "";
export_file_name = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var clicked_on = instance_position( mouse_x, mouse_y, obj_grid_cell );
if(instance_exists(clicked_on)){
    var prev_selected = obj_grid.selected_cell;
    obj_grid.selected_cell = clicked_on;
    with(obj_grid){
        event_user(9);
    }
    obj_grid.selected_cell = prev_selected;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear selected cell
if(instance_exists(selected_cell)){
    selected_cell.image_blend = c_black;
    selected_cell.h = 0;
    selected_cell.s = 0;
    selected_cell.l = 0;
    selected_cell.r = 0;
    selected_cell.g = 0;
    selected_cell.b = 0;
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Export grid to file
//var file_name = "test.ini";
show_debug_message("Exporting to '" + export_file_name + "'");

var file = file_text_open_write(export_file_name);
var hex_code = "";
var name_split, file_extension;
name_split = string_split(export_file_name, ".");
file_extension = name_split[array_length_1d(name_split) -1];

if(file_extension == "pal"){
    file_text_write_string(file, "JASC-PAL");
    file_text_writeln(file);
    file_text_write_string(file, "0100");
    file_text_writeln(file);
    file_text_write_string(file, "256");
    file_text_writeln(file);
    for(j = 0; j &lt; height; j++){
        for(i = 0; i &lt; width; i++){        
            file_text_write_string(file, string(cells[i, j].r) + " " + string(cells[i, j].g) + " " + string(cells[i, j].b));
            file_text_writeln(file);                                                 
        }
    }
}
else if(file_extension == "css"){
    file_text_write_string(file, "{");
    file_text_writeln(file);
    for(j = 0; j &lt; height; j++){
        for(i = 0; i &lt; width; i++){ 
            hex_code = rgb_to_hex(cells[i, j].r, cells[i, j].g, cells[i, j].b);        
            file_text_write_string(file, "color :#" + hex_code + ";");
            file_text_writeln(file); 
        }
    }
    file_text_write_string(file, "}");
}
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load grid from file
//var file_name = "test.ini";
show_debug_message("Loading from '" + file_name + "'");
ini_open(file_name);
for(i = 0; i &lt; width; i++){
    for(j = 0; j &lt; height; j++){
        cells[i, j].r = ini_read_real(string(i) + string(j), 'r', 0);
        cells[i, j].g = ini_read_real(string(i) + string(j), 'g', 0);
        cells[i, j].b = ini_read_real(string(i) + string(j), 'b', 0);
        cells[i, j].h = ini_read_real(string(i) + string(j), 'h', 0);
        cells[i, j].s = ini_read_real(string(i) + string(j), 's', 0);
        cells[i, j].l = ini_read_real(string(i) + string(j), 'l', 0);
        with(cells[i, j]){
            event_user(1);
        }
    }
}
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save grid to file

//file_name = "test.ini";
show_debug_message("Saving to '" + file_name + "'");
ini_open(file_name);
for(i = 0; i &lt; width; i++){
    for(j = 0; j &lt; height; j++){
        ini_write_real(string(i) + string(j), 'r', cells[i, j].r );    
        ini_write_real(string(i) + string(j), 'g', cells[i, j].g );    
        ini_write_real(string(i) + string(j), 'b', cells[i, j].b );    
        ini_write_real(string(i) + string(j), 'h', cells[i, j].h );    
        ini_write_real(string(i) + string(j), 's', cells[i, j].s );    
        ini_write_real(string(i) + string(j), 'l', cells[i, j].l );                                                    
    }
}
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blend color bottom
if(instance_exists(selected_cell)){
    blend_direction = 1;
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate light to right
if(instance_exists(selected_cell) &amp;&amp; (selected_cell.col + 1 &lt;= width - 1)){
    if(obj_light_panel.go_right){
        light = 360;
    }
    else{
        light = 0;
    }
    var shadowBlock = cells[selected_cell.col + 1, selected_cell.row];
    shadowBlock.h = min(selected_cell.h + sign(light - selected_cell.h) * 14, 360);
    shadowBlock.l = min(selected_cell.l + .14, 1);
    shadowBlock.s = selected_cell.s;
    //show_debug_message("h: " + string(shadowBlock.h) + ", s: " + string(shadowBlock.s) + ", l: " + string(shadowBlock.l));
    with(shadowBlock){
        event_user(0);
    }
    selected_cell = shadowBlock;
    with(obj_cc_f){
        color_preview.image_blend = other.selected_cell.image_blend;
        event_user(4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Merge top
if(instance_exists(selected_cell)){
    blend_direction = -1;
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate shadow to left
if(instance_exists(selected_cell) &amp;&amp; (selected_cell.col - 1 &gt;= 0)){
    if(obj_shadow_panel.go_right){
        shadow = 360;
    }
    else{
        shadow = 0;
    }
    var shadowBlock = cells[selected_cell.col - 1, selected_cell.row];
    shadowBlock.h = min(selected_cell.h + sign(shadow - selected_cell.h) * 14, 360);
    shadowBlock.l = max(selected_cell.l - .14, 0);
    shadowBlock.s = selected_cell.s;
    //show_debug_message("h: " + string(shadowBlock.h) + ", s: " + string(shadowBlock.s) + ", l: " + string(shadowBlock.l));
    with(shadowBlock){
        event_user(0);
    }
    selected_cell = shadowBlock;
    with(obj_cc_f){
        color_preview.image_blend = other.selected_cell.image_blend;
        event_user(4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blend adjacent colors
var valid_block, nValidBlocks, block_to_modify;
var r, g, b;
var i;

valid_block = noone;
if(blend_direction &gt; 0){
    for(i = selected_cell.row + 1; i &lt; height; i++){
        valid_block = cells[selected_cell.col, i];
        if(valid_block.l &gt; 0){        
            break;
        }
    }
}
else{
    for(i = selected_cell.row - 1; i &gt;= 0; i--){
        valid_block = cells[selected_cell.col, i];
        if(valid_block.l &gt; 0){        
            break;
        }
    }
}
if(instance_exists(valid_block)){
    nValidBlocks = blend_direction*valid_block.row - blend_direction*selected_cell.row - 1;
    for(i = 1; i &lt; nValidBlocks + 1; i++){
        block_to_modify = cells[selected_cell.col, selected_cell.row + blend_direction*i];
           
        r = lerp( selected_cell.r, valid_block.r, i/(nValidBlocks + 1));
        g = lerp( selected_cell.g, valid_block.g, i/(nValidBlocks + 1));
        b = lerp( selected_cell.b, valid_block.b,  i/(nValidBlocks + 1));
        
        block_to_modify.r = r;
        block_to_modify.g = g;
        block_to_modify.b = b;
        
        with(block_to_modify){
            event_user(1);
        }
        block_to_modify.l = lerp( selected_cell.l, valid_block.l, i/(nValidBlocks + 1));
        with(block_to_modify){
            event_user(0);
        }
    }
    selected_cell = valid_block;
    with(obj_cc_f){
        color_preview.image_blend = other.selected_cell.image_blend;
        event_user(4);
    }
}
//show_debug_message("i: " + string(i) + ", height: " + string(height));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Paint selected cell with color
if(instance_exists(selected_cell)){
    var col = color_to_paint;
//    if(col != noone &amp;&amp; col!= selected_cell.image_blend){
    //if(col != noone){
//        selected_cell.image_blend = col;
        //show_debug_message("color_get_red(col): " + string(color_get_red(col)) + ", color_get_blue(col): " + string(color_get_blue(col)) + ", color_get_green(col): " + string(color_get_green(col)));
        var hsl = rgb_to_hsl(color_get_red(col), color_get_green(col), color_get_blue(col));
        selected_cell.h = hsl[0];
        selected_cell.s = hsl[1];
        selected_cell.l = hsl[2];
        with(selected_cell){
            event_user(0);
        }
        //show_debug_message("Applied -&gt; h: " + string(selected_cell.h) + ", s: " + string(selected_cell.s) + ", l: " + string(selected_cell.l));        
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 1; i &lt; width; i++){
    draw_line_width_colour(x + i*cell_size, y, x + i*cell_size, y + sprite_height, line_width, line_color, line_color);
}
for(i = 1; i &lt; height; i++){
    draw_line_width_colour(x, y + i*cell_size, x + sprite_width, y+ i*cell_size, line_width, line_color, line_color);
}
if(has_borders){
    draw_line_width_colour(x, y, x + sprite_width, y, line_width, line_color, line_color);
    draw_line_width_colour(x + sprite_width, y, x + sprite_width, y + sprite_height, line_width, line_color, line_color);
    draw_line_width_colour(x + sprite_width, y + sprite_height, x, y + sprite_height, line_width, line_color, line_color);
    draw_line_width_colour(x, y + sprite_height, x, y, line_width, line_color, line_color);
}

if(instance_exists(selected_cell)){
    draw_line_width_colour(selected_cell.x, selected_cell.y, selected_cell.x + selected_cell.sprite_width, selected_cell.y, line_width, selected_cell_color, selected_cell_color);    
    draw_line_width_colour(selected_cell.x + selected_cell.sprite_width, selected_cell.y, selected_cell.x + selected_cell.sprite_width, selected_cell.y + selected_cell.sprite_height, line_width, selected_cell_color, selected_cell_color);       
    draw_line_width_colour(selected_cell.x + selected_cell.sprite_width, selected_cell.y + selected_cell.sprite_height, selected_cell.x, selected_cell.y + selected_cell.sprite_height, line_width, selected_cell_color, selected_cell_color);           
    draw_line_width_colour(selected_cell.x, selected_cell.y + selected_cell.sprite_height, selected_cell.x, selected_cell.y, line_width, selected_cell_color, selected_cell_color);               
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
