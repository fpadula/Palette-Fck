<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_anchor_to_screen</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
has_been_setup = false;
hovering = false;
clicked = false;
text_scale = 1;
hover_increase_ammount = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hovering){
    if(mouse_x &gt;= x &amp;&amp; mouse_x &lt;= x + width &amp;&amp; mouse_y &gt;= y &amp;&amp; mouse_y &lt;= y + height){
        if(!hovering){
            hovering = true;  
            text_scale = 1 + hover_increase_ammount;            
        }
        if(mouse_check_button(mb_left)){
            text_scale = 1;        
            clicked = true;        
        }
    }
    else if(hovering){
        hovering = false;
        text_scale = 1;
    }
}
else{
    if(mouse_x &gt;= x - pixel_increase_width/2 &amp;&amp; mouse_x &lt;= x + width + pixel_increase_width/2 &amp;&amp; mouse_y &gt;= y - pixel_increase_height/2 &amp;&amp; mouse_y &lt;= y + height + pixel_increase_height/2){
        if(!hovering){
            hovering = true;  
            text_scale = 1 + hover_increase_ammount;      
        }
        if(mouse_check_button(mb_left)){
            text_scale = 1;        
            clicked = true;
        }
    }
    else if(hovering){
        hovering = false;
        text_scale = 1;
    }
}
if(clicked){
    if(!mouse_check_button(mb_left)){
        text_scale = 1 + hover_increase_ammount;
        clicked = false;
        hovering = false;
        if(instance_exists(event_performer_obj)){
            with(event_performer_obj){
                event_perform(other.event_type_to_be_performed, other.event_number_to_be_performed);
            }
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inner_rect_width            = width - 2*border_width;
inner_rect_height           = height - 2*border_width;
pixel_increase_width        = hover_increase_ammount * width;
pixel_increase_height       = hover_increase_ammount * height;
pixel_increase_inner_width  = inner_rect_width * hover_increase_ammount;
pixel_increase_inner_height = inner_rect_height * hover_increase_ammount;
black_ammount               = 0.3;
hover_inner_color           = merge_color(inner_color, c_black, black_ammount);
hover_border_color          = merge_color(border_color, c_black, black_ammount);
hover_text_color            = merge_color(text_color, c_black, black_ammount);
has_been_setup              = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(has_been_setup){
    if(!hovering){
        draw_set_colour(border_color);
        draw_rectangle(x, y, x + width, y + height, false);
        draw_set_colour(inner_color);
        draw_rectangle(x + border_width, y + border_width, x + border_width + inner_rect_width, y + border_width + inner_rect_height, false);    
        draw_set_colour(text_color);        
    }
    else if(!clicked){
        draw_set_colour(border_color);
        draw_rectangle(x - pixel_increase_width/2, y - pixel_increase_height/2, x + width + pixel_increase_width/2, y + height + pixel_increase_height/2, false);
        draw_set_colour(inner_color);
        draw_rectangle(x + border_width - pixel_increase_inner_width/2, y + border_width - pixel_increase_inner_height/2, x + border_width + inner_rect_width + pixel_increase_inner_width/2, y + border_width + inner_rect_height + pixel_increase_inner_height/2, false);        
        draw_set_colour(text_color);       
    }
    else if(hovering){
        draw_set_colour(hover_border_color);
        draw_rectangle(x, y, x + width, y + height, false);
        draw_set_colour(inner_color);
        draw_rectangle(x + border_width, y + border_width, x + border_width + inner_rect_width, y + border_width + inner_rect_height, false);    
        draw_set_colour(hover_text_color);    
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);    
    draw_set_font(text_font);
    
    draw_text_transformed(x + width/2, y + height/2, text, text_scale, text_scale, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
