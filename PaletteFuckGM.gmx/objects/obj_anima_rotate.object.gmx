<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>obj_anima_animation</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(target_obj)){
    instance_destroy();
    exit;
}
target_obj.x = initial_x;
target_obj.y = initial_y;
target_obj.image_angle = initial_value[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(target_obj)){
    instance_destroy();
    exit;
}
initial_value[1] = target_obj.image_angle;
initial_x = target_obj.x;
initial_y = target_obj.y;
if(pivot_coords_are_absolute){
    initial_value[0] = degtorad( point_direction(rotation_point_x, rotation_point_y, target_obj.x, target_obj.y) );
    radius = point_distance(rotation_point_x, rotation_point_y, target_obj.x, target_obj.y);
}
else{
    if(!instance_exists(pivot_object)){
        initial_value[0] = degtorad( point_direction(rotation_point_x + target_obj.x, rotation_point_y + target_obj.y, target_obj.x, target_obj.y) );
        radius = point_distance(rotation_point_x + target_obj.x, rotation_point_y + target_obj.y, target_obj.x, target_obj.y);
    }
    else{
        initial_value[0] = degtorad( point_direction(pivot_object.x, pivot_object.y, target_obj.x, target_obj.y) );
        radius = point_distance(pivot_object.x, pivot_object.y, target_obj.x, target_obj.y);
        previous_pivot_object_x = pivot_object.x;
        previous_pivot_object_y = pivot_object.y;        
    }    
    final_value[1] += initial_value[1];
}
if(!is_by){
    value_difference[0] = final_value[0] - initial_value[0];
    final_value[1] = initial_value[1] + radtodeg(value_difference[0]);
    value_difference[1] = final_value[1] - initial_value[1];
}
else{
    final_value[0] = initial_value[0] + value_difference[0];
    final_value[1] = initial_value[1] + value_difference[1];
}
//show_debug_message("Initial angle: " + string(radtodeg(initial_value[0])) + ", diference: " + string(radtodeg(value_difference[0])) + ", final: " + string(radtodeg(final_value[0])));
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculating values
if(instance_exists(target_obj)){
    if(instance_exists(pivot_object)){
        target_obj.x += pivot_object.x - previous_pivot_object_x;
        target_obj.y += pivot_object.y - previous_pivot_object_y;
        previous_pivot_object_x = pivot_object.x;
        previous_pivot_object_y = pivot_object.y;  
    }
    if(has_point_of_rotation){
        target_obj.x += radius*(cos(current_value[0]) - cos(previous_value[0]));
        target_obj.y -= radius*(sin(current_value[0]) - sin(previous_value[0]));               
    }
    target_obj.image_angle += current_value[1] - previous_value[1];
}
else{
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
